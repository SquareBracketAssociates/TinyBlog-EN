!! Deploying TinyBlog

In this chapter we will show you how to deploy your Pharo application. In particular we will show how to deploy on the cloud. 
!!! Deploying in the cloud

Now that TinyBlog is ready we will see how we can deploy your application on a server on the web.
If you want to deploy your application on a server that you administrate, we suggest reading the last chapter of 
 "Enterprise Pharo: a Web Perspective" (*http://books.pharo.org*).
In the following we present a simpler solution offered by PharoCloud.

!!!Login on PharoCloud
PharoCloud is hosting Pharo applications and it offers the possibility to freely tests its services (ephemeric cloud subscription).

Prepare your PharoCloud account:
- Create an account on *http://pharocloud.com*
- Activate your account
- Connect to this account
- Activate "Ephemeric Cloud" to get an id (""API User ID"") and password (""API Auth Token"")
- Click on "Open Cloud Client" and login with the previous ids
- Once connected, you should get a web page that allows you to upload a zip archive containing a Pharo image and its companion Pharo changes file. 

!!!Preparing your Pharo image Pharo for PharoCloud

!!!! Get a fresh new image
You should
- First downaload a fresh PharoWeb image from *http://files.pharo.org/mooc/image/PharoWeb-60.zip*.
- Launch this image and now we will configure it.

!!!! Seaside configuration 
We remove the Seaside demo applications and the development tools 

[[[
"Seaside Deployment configuration"
WAAdmin clearAll.
WAAdmin applicationDefaults removeParent: WADevelopmentConfiguration instance.
WAFileHandler default: WAFileHandler new.
WAFileHandler default
    preferenceAt: #fileHandlerListingClass
    put: WAHtmlFileHandlerListing.
WAAdmin defaultDispatcher
    register: WAFileHandler default
    at: 'files'.
]]]

!!!! Loading TinyBlog

We load the latest version of the TinyBlog application.
To load the version we propose you can use :

[[[
"Load TinyBlog"
Gofer new
   smalltalkhubUser: 'PharoMooc' project: 'TinyBlog';
   package: 'ConfigurationOfTinyBlog';
   load.
#ConfigurationOfTinyBlog asClass loadFinalApp.

"Create Demo posts if needed"
#TBBlog asClass createDemoPosts.
]]]

You can also load ""your ""  TinyBlog code from your Smalltalkhub repository. 
For example doing:

[[[
"Load TinyBlog"
Gofer new
   smalltalkhubUser: 'XXXX' project: 'TinyBlog';
   package: 'TinyBlog';
   load.

"Create Demo posts if needed"
#TBBlog asClass createDemoPosts.
]]]

!!!! TinyBlog as Default Seaside Application
We now set Tinyblog as the default Seaside application and we run the HTTP webserver:

[[[
"Tell Seaside to use TinyBlog as default app"
WADispatcher default defaultName: 'TinyBlog'.

"Register TinyBlog on Seaside"
#TBApplicationRootComponent asClass initialize.
]]]

Lancer Seaside :

[[[
	"Start HTTP server"
	ZnZincServerAdaptor startOn: 8080.
]]]

!!!! Save the Image
Save your image  (Menu World > save) and locally test it in your web browser at: *http://localhost:8080*.

!!!Manually deploying on PharoCloud's Ephemeric Cloud

- Create a zip archive that contains the previously saved images and changes files: ==PharoWeb.image== et ==PharoWeb.changes==.

- Drag and drop this zip file on the Ephemeric Cloud and activate the image using the play button as shown in Figure *@activeEphemerics*.

+Ephemeric Cloud administration Pharo image.>file://figures/ActiveEphemerics.png|width=85|label=activeEphemerics+

By clicking on the public URL given by PharoCloud you will be able to display your TinyBlog application as shown by Figure *@tinyBlogOnPharoCloud*.

+Your TinyBlog Application on PharoCloud.>file://figures/TinyBlogOnPharoCloud.png|width=85|label=tinyBlogOnPharoCloud+

!!!Déploiement automatique sur Ephemeric Cloud de PharoCloud 

Plutôt que faire une archive zip et utiliser son navigateur, la documentation de PharoCloud (*http://docs.swarm.pharocloud.com/*) indique comment déployer directement son image Pharo en exécutant le code suivant (attention, c'est un peu long le temps que l'image soit transférée sur PharoCloud) :

[[[
|client EPHUSER EPHTOKEN| 

Metacello new 	
	smalltalkhubUser: 'mikefilonov' project: 'EphemericCloudAPI';
	configuration: 'EphemericCloudAPI';
	load.

ephUser :='<REST API UserID>'.
ephToken :='<REST API Token>'.
client := EphemericCloudClient userID: EPHUSER authToken: EPHTOKEN. 
	(client publishSelfAs: 'glimpse') 
		ifTrue:[ZnZincServerAdaptor startOn: 8080] 
		ifFalse: [ client lastPublishedInstance hostname ]
]]]


!!! A propos de dépendances

Les bonnes pratiques lors de développements en Pharo sont de spécifier clairement les dépendances sur les packages utilisés afin d'avoir une reproductibilité complète d'un projet. Une telle reproductibilité permet alors l'utilisation de serveur de construction tels que Travis ou Jenkins.
Pour cela, une configuration (une classe spéciale) définit d'une part l'architecture du projet (dépendances et packages du projet) et les versions des packages versionnés. 

Dans le cadre de ce projet, nous n'abordons pas ce point plus avancé. Un chapitre entier est consacré à l'expression de configurations dans le livre intitulé "Deep Into Pharo" (cf. *http://books.pharo.org*). 
 
%!!!!! Optionel. 
%Si vous voulez essayer de créer une configuration, vous pouvez utiliser Versionner. 
%Dans votre image Pharo, ouvrez l'outil Versionner depuis le menu 'Tools':
%%- Créez un nouveau projet nommé "TinyBlog",
%- Indiquez que votre projet dépend de PharoWeb (dépendance entre projets),
%- Dans Packages, ajoutez le paquet TinyBlog,
%- Définissez le dépôt de votre projet: 'http://smalltalkhub.com/mc/XXX/TinyBlog/main'
%- Cliquez sur le bouton "Save to development" (pour générer la nouvelle structure %d'architecture et dépendances), "Release" (pour créer une nouvelle vetsion) et Commit (pour sauver le code sur le serveur).


% Local Variables:
% compile-command: "cd .. && ./compile.sh --to='latex' Exercises/Exo-W6-TinyBlog-Deployment-FR.pillar"
% End:
