!! TinyBlog Application: Core model
@cha:model
% full code at: 9c87f4b8abb956469e145d2ba8afeba8b66159d2

In this chapter we will start to develop part of the domain model of TinyBlog. The model is extremely simple: it starts with just a post. In the next chapter we will add a blog containing a list of these posts.


!!! TBPost Class

+TBPost: a really basic class mostly handling data.>file://figures/postUML.pdf|width=20|label=postUml+

We start with the post representation. It is very simple, as you can see in Figure *@postUml*. It is defined by the class ==TBPost==:

[[[
Object subclass: #TBPost
   instanceVariableNames: 'title text date category visible'
   classVariableNames: ''
   package: 'TinyBlog'
]]]

A blog post is described by 5 instance variables:

|!Variable         |!Signification                       |
|==title==         |post title                           |
|==text==          |post text                            |
|==date==          |date of writing                      |
|==category==      |name of the category of the post     |
|==visible==       |is the post publicly visible or not? |

All of these variables have corresponding accessor methods in the 'accessing' protocol. You can use a refactoring to automatically create all of the following methods:

[[[
TBPost >> title
   ^ title
]]]
[[[
TBPost >> title: aString
   title := aString
]]]
[[[
TBPost >> text
   ^ text
]]]
[[[
TBPost >> text: aString
   text := aString
]]]
[[[
TBPost >> date
   ^ date
]]]
[[[
TBPost >> date: aDate
   date := aDate
]]]
[[[
TBPost >> visible
   ^ visible
]]]
[[[
TBPost >> visible: aBoolean
   visible := aBoolean
]]]
[[[
TBPost >> category
   ^ category
]]]
[[[
TBPost >> category: anObject
   category := anObject
]]]


!!! Post Visibility

We should add methods to make a post visible or not and also test if it is visible. Those methods are defined in the 'action' protocol.

[[[
TBPost >> beVisible
   self visible: true
]]]
[[[
TBPost >> notVisible
   self visible: false
]]]


!!! Initialization

The ==initialize== method (in the 'initialization' protocol) sets the date to the current day and the visibility to false; the user must explicitly make a post visible. This allows them to write a draft post and only publish it when it is finished. By default, a post belongs to the 'Unclassified' category that we define at the class level. This category name is defined on the class-side by the ==unclassifiedTag== method.

[[[
TBPost class >> unclassifiedTag
   ^ 'Unclassified'
]]]

Pay attention the method ==unclassifiedTag== should be defined on the ''class-side'' of the class ==TBPost== (click on the ==class== button to define it). The other methods are defined on the instance-side and will be applied to ==TBBlog== instances. 

[[[
TBPost >> initialize
	super initialize.
	self category: TBPost unclassifiedTag.
	self date: Date today.
	self notVisible
]]]

In the solution above, it would be better for the ==initialize== method not to hard code the reference to the ==TBPost== class. Try to think of a solution. The part 3 in week 6 of the Mooc will help you to understand why it is better to avoid hardcoding class references (See *http://mooc.pharo.org*).

!!! Posts Creation Methods

On the class-side, we add class methods (i.e. methods that execute on the class object) to make post creation more convenient - usually such methods are grouped under the protocol 'instance creation'.

We define two methods:
[[[
TBPost class >> title: aTitle text: aText
   ^ self new
        title: aTitle;
        text: aText;
        yourself
]]]

[[[
TBPost class >> title: aTitle text: aText category: aCategory
   ^ (self title: aTitle text: aText)
            category: aCategory;
            yourself
]]]

!!! Creating a Post

Let us create some posts to check the objects that are created. Using the Playground tool, execute the following expression:

[[[
TBPost 
	title: 'Welcome in TinyBlog' 
	text: 'TinyBlog is a small blog engine made with Pharo.' 
	category: 'TinyBlog'
]]]

When you inspect the code above (right click and "Inspect it"), you will open an inspector on the newly created object as shown in Figure *@inspectorOnTBPost*.

+Inspector on a TBPost instance.>file://figures/inspectorOnTBPost.png|width=100|label=inspectorOnTBPost+

!!! Adding Some Unit Tests

Manually looking at objects is not a good way to systematically verify that such objects behave as expected. Even though the model is quite simple we can still define some tests. When doing Test Driven Developement we write our tests first, but here we have preferred to define a little class to familiarize ourselves with the IDE first. Let us fix this!

We define the class ==TBPostTest== (as subclass of the class ==TestCase==):

[[[
TestCase subclass: #TBPostTest
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'TinyBlog-Tests'
]]]

Let us define two tests:

[[[
TBPostTest >> testWithoutCategoryIsUnclassified

	| post |
	post := TBPost 
		title: 'Welcome to TinyBlog' 
		text: 'TinyBlog is a small blog engine made with Pharo.'.
	self assert: post title equals: 'Welcome to TinyBlog'.
	self assert: post category = TBPost unclassifiedTag
]]]

[[[
TBPostTest >> testPostIsCreatedCorrectly

    | post |
    post := TBPost 
        title: 'Welcome to TinyBlog' 
	    text: 'TinyBlog is a small blog engine made with Pharo.' 
	    category: 'TinyBlog'.
    self assert: post title equals: 'Welcome to TinyBlog'.
    self assert: post text equals: 'TinyBlog is a small blog engine made with Pharo.'
]]]

Your tests should pass.

!!! Post Queries

In the protocol 'testing', define the following methods that checks whether a post is visible, and whether it is classified or not:

[[[
TBPost >> isVisible
   ^ self visible
]]]

[[[
TBPost >> isUnclassified
   ^ self category = TBPost unclassifiedTag
]]]

Again, it is not really good practice to hardcode a reference to the class ==TBPost== in a method body. Try to think of a solution.

In addition, let us take the time to update our tests to demonstrate this new behavior:

[[[
TBPostTest >> testWithoutCategoryIsUnclassified

	| post |
	post := TBPost 
		title: 'Welcome to TinyBlog' 
		text: 'TinyBlog is a small blog engine made with Pharo.'.
	self assert: post title equals: 'Welcome to TinyBlog' .
	self assert: post isUnclassified.
	self deny: post isVisible
]]]

!!! Conclusion

We have developed the first part of the model (the class ==TBPost==) and some tests. We strongly suggest writing some more unit tests to make sure that your model works as expected. 

