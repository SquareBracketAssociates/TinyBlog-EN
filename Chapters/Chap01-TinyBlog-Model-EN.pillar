!!  TinyBlog Application: Core model
@cha:model
% full code at: 9c87f4b8abb956469e145d2ba8afeba8b66159d2

In this chapter, we start to develop a part of the domain model of TinyBlog.
The model is particularly simple: it starts with a post. 
In the next chapter we will add a blog containing a list of posts.


!!! TBPost Class

+TBPost: a really basic class mostly handling data.>file://figures/postUML.pdf|width=20|label=postUml+

We start with the post representation. It is super simple as shown by Figure *@postUml*. It is defined by the class ==TBPost==:

[[[
Object subclass: #TBPost
   instanceVariableNames: 'title text date category visible'
   classVariableNames: ''
   package: 'TinyBlog'
]]]

A blog post is described by 5 instance variables.

|!Variable         |!Signification                       |
|==title==         |post title                           |
|==text==          |post text                            |
|==date==          |date of writing                      |
|==category==      |name of the category of the post     |
|==visible==       |is the post publicly visible or not? |

All of these variables have corresponding accessor methods in the 'accessing' protocol.
You can use a refactoring to automatically create all the following methods:

[[[
TBPost >> title
   ^ title
]]]
[[[
TBPost >> title: aString
   title := aString
]]]
[[[
TBPost >> text
   ^ text
]]]
[[[
TBPost >> text: aString
   text := aString
]]]
[[[
TBPost >> date
   ^ date
]]]
[[[
TBPost >> date: aDate
   date := aDate
]]]
[[[
TBPost >> visible
   ^ visible
]]]
[[[
TBPost >> visible: aBoolean
   visible := aBoolean
]]]
[[[
TBPost >> category
   ^ category
]]]
[[[
TBPost >> category: anObject
   category := anObject
]]]



!!!Post Visibility

We should add methods to make a post visible or not and also test if it is visible. Those methods are defined in the 'action' protocol.

[[[
TBPost >> beVisible
   self visible: true
]]]
[[[
TBPost >> notVisible
   self visible: false
]]]


!!!Initialization

The ==initialize== method ('initialization' protocol) sets the date to the current day and the visibility to false: the user must explicitly make a post visible. 
This allows him to write drafts and only publish a post when the post is finished.
By default, a post belongs to the 'Unclassified' category that we define at the class level.
This category name is defined on class-side by the ==unclassifiedTag== method.

[[[
TBPost class >> unclassifiedTag
   ^ 'Unclassified'
]]]

Pay attention the method ==unclassifiedTag== should be defined on the class-side of the class ==TBPost== (click on the ==class== button to define it). 
The other methods are defined on the instance-side: it means that they will be applied to ==TBBlog== instances. 

[[[
TBPost >> initialize
	super initialize.
	self category: TBPost unclassifiedTag.
	self date: Date today.
	self notVisible
]]]

In the solution above, it would be better that the ==initialize== method does not hard code the reference to the ==TBPost== class. 
Propose a solution.
The sequence 3 of the week 6 of the Mooc can help you to understand why it is better to avoid hardcoding class references (See *http://mooc.pharo.org*).


!!!Posts Creation Methods

On class-side, we add class methods (i.e. methods execute on class) to ease posts creation for blogs - usually such kind of methods are grouped in the protocol 'instance creation'.

We define two methods.
[[[
TBPost class >> title: aTitle text: aText
   ^ self new
        title: aTitle;
        text: aText;
        yourself
]]]

[[[
TBPost class >> title: aTitle text: aText category: aCategory
   ^ (self title: aTitle text: aText)
            category: aCategory;
            yourself
]]]

!!!Creating a Post

Let us create posts to check a bit the created objects. Using the Playground tools execute the following expression:

[[[
TBPost 
	title: 'Welcome in TinyBlog' 
	text: 'TinyBlog is a small blog engine made with Pharo.' 
	category: 'TinyBlog'
]]]

When you inspect the code above (right click and "Inspect it"), you will obtain an inspector on the newly created object as shown in Figure *@inspectorOnTBPost*.

+Inspector on a TBPost instance.>file://figures/inspectorOnTBPost.png|width=100|label=inspectorOnTBPost+

!!! Adding Some Unit Tests

Manually looking at objects is not a way to systematically verifying that such objects follow some expected invariant.
Even though the model is quite simple we can define some tests.
In Test Driven Developpement mode we write test first. 
Here we preferred to let you define a little class to familiarize with the IDE. 
Let us fix this!

We define the class ==TBPostTest== (as subclass of the class ==TestCase==).

[[[
TestCase subclass: #TBPostTest
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'TinyBlog-Tests'
]]]

Let us define a two tests.
[[[
TBPostTest >> testWithoutCategoryIsUnclassified

	| post |
	post := TBPost 
		title: 'Welcome to TinyBlog' 
		text: 'TinyBlog is a small blog engine made with Pharo.'.
	self assert: post title equals: 'Welcome to TinyBlog' .
	self assert: post category = TBPost unclassifiedTag.
]]]

[[[
TBPostTest >> testPostIsCreatedCorrectly

		| post |
		post := TBPost 
			title: 'Welcome to TinyBlog' 
			text: 'TinyBlog is a small blog engine made with Pharo.' 
			category: 'TinyBlog'.
		self assert: post title equals: 'Welcome to TinyBlog' .
		self assert: post text equals: 'TinyBlog is a small blog engine made with Pharo.' .
]]]

Your tests should pass.

!!! Post Queries

In the protocol 'testing', define the following methods that checks whether a post is visible, and whether it is classified or not.

[[[
TBPost >> isVisible
   ^ self visible
]]]
[[[
TBPost >> isUnclassified
   ^ self category = TBPost unclassifiedTag
]]]

It is not really good to hardcode a reference to the class ==TBPost== in a method body.
Propose a solution.

In addition, let us take the time to update our test to take advantage of the new behavior.

[[[
TBPostTest >> testWithoutCategoryIsUnclassified

	| post |
	post := TBPost 
		title: 'Welcome to TinyBlog' 
		text: 'TinyBlog is a small blog engine made with Pharo.'.
	self assert: post title equals: 'Welcome to TinyBlog' .
	self assert: post isUnclassified.
	self deny: post isVisible
]]]



!!! Conclusion

We develop a first part of the model (the class ==TBPost==) and some tests. 
We strongly suggest writing some other unit tests to make sure that your model fully work. 

